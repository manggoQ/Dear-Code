//青蛙跳台阶——斐波那契数列
//1 2 3 5 8 13 21
//int Jump(int n)
//{
//	int a = 1;
//	int b = 2;
//	int c = n;
//	while (n > 2)
//	{
//		c = a + b;
//		a = b;
//		b = c;
//		n--;
//	}
//	return c;
//
//}
//int main()
//{
//	int n = 0;
//	int ret = 0;
//	printf("输入台阶数：");
//	scanf("%d", &n);
//	ret = Jump(n);
//	printf("青蛙有%d种跳法\n", ret);
//	system("pause");
//	return 0;
//}




//冒泡排序
// void bubble_sort(int arr[],int sz)
//{
//	 //确定冒泡排序的趟数
//	 int i = 0;
//	 //每一趟冒泡排序的内容
//	 for (i = 0; i < sz - 1; i++)
//	 {
//		 int flag = 1;//假设这一趟要排序的数据已经有序
//		 int j = 0;
//		 //相邻两个数比较
//		 for (j = 0; j <sz-1-i ; j++)
//			 //每趟要进行比较的对数
//			 //sz-1-i 10趟要比较9对  9趟就比较8对
//		 {
//			 if (arr[j]>arr[j + 1])
//			 {
//				 int tmp = arr[j];
//				 arr[j] = arr[j + 1];
//				 arr[j + 1] = tmp;
//				 flag = 0;//本趟排序的数据其实不完全有序
//			 }
//		 }
//		 if (flag == 1)//数据有序
//		 {
//			 break;
//		 }
//	 }
//}
//int main()
//{
//	int arr[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);//算好后传过去
//	//对arr进行排序，由小到大
//	//arr是数组，我们对数组arr进行传参，实际上传过去的是数组arr首元素的地址
//	bubble_sort(arr,sz);//冒泡函数名
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	printf("\n");
//	system("pause");
//	return 0;
//}



int main()
{
	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	printf("%p\n", arr);
	printf("%p\n", &arr[0]);
	printf("%p\n", &arr);//整个数组的地址
	//int sz = sizeof(arr) / sizeof(arr[0]);
	//1、sizeof[数组名]--数组名表示整个数组，sizeof（数组名）计算的是整个数组的大小，单位是字节
	//2、&数组名，数组名代表整个数组，&数组名——取出的是整个数组的地址

	//printf("%p\n", arr);
	//printf("%p\n", &arr[0]);
	//printf("%d\n", *arr);//1
	system("pause");
	return 0;
}



总结：冒泡排序（最大的数通过两两比较冒上去）
