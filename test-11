//是素数返回1，不是返回0
//#include<math.h>
//int is_prime(int n)
//{
//	int b = 0;
//	//2->n-1
//		for (b = 2; b <=sqrt((double)n); b++)
//		{
//			if (n%b == 0)
//				return 0;
//		}
//		return 1;//2到n-1中的数没有一个能整除他——素数  直接返回1
//}
//int main()
//{
//	//打印100-200之间的素数
//	int i = 0;
//	printf("请输入一个数：");
//	scanf("%d", &i);
//		//判断i是否为素数
//	if (is_prime(i) == 1)
//		printf("%d是素数\n", i); 
//	system("pause");
//	return 0;
//}




//函数判断年份是否为闰年
//自己写
//int is_leap(int x)
//{
//	if ((x % 4 == 0 && x % 100 != 0) || (x % 400 == 0))
//	{
//		return 1;
//	}
//	else
//	{
//		return 0;
//	}
//}
//int main()
//{
//	int year = 0;
//	printf("输入一个年份：");
//	scanf("%d", &year);
//	if (is_leap(year) == 1)
//		printf("%d年是闰年\n", year);
//	system("pause");
//	return 0;
//}



//打印闰年参考
//int is_leap_year(int y)
//{
//	if ((y % 4 == 0 && y % 100 != 0) || (y % 400 == 0))
//		return 1;
//	else
//		return 0;
//}
//int main()
//{
//	int year = 0;
//	for (year = 1000; year <= 2000; year++)
//	{
//		//判断year是否为闰年
//		if (1 == is_leap_year(year))
//		{
//			printf("%d ", year);
//		}
//	}
//	system("pause");
//	return 0;
//}




//int binary_search(int arr[], int k,int sz)
////本质上arr是一个指针
//{
//	//算法的真正实现
//	//int sz = sizeof(arr) / sizeof(arr[0]);
//	//实际上求的是指针的大小
//	//数组名是首元素的地址
//	int left = 0;
//	int right = sz - 1;
//	while (left <= right)
//	{
//		int mid = (left + right) / 2;//这句话必须在循环里
//		if (arr[mid] < k)
//		{
//			left = mid + 1;
//		}
//		else if (arr[mid]>k)
//		{
//			right = mid - 1;
//		}
//		else
//		{
//			return mid;
//		}
//	}
//	return -1;
//}
//int main()
//{
//	//二分查找
//	//在一个有序数组中查找具体的某个数
//	//如果找到了返回该数字下标，找不到返回-1
//	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	int k = 7;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int ret=binary_search(arr,k,sz);
//	//这里arr传递过去的是数组arr首元素地址
//	if (ret == -1)
//	{
//		printf("找不到指定的数字\n");
//	}
//	else
//	{
//		printf("找到了，下标是：%d\n", ret);
//	}
//	system("pause");
//	return 0;
//}



//void Add(int* p)
//{
//	//*p++;  ++的优先级高于* ——* p++
//	(*p)++;
//}
//int main()
//{
//	int num = 0;
//	Add(&num);
//	printf("num=%d\n", num);
//	Add(&num);
//	printf("num=%d\n", num);
//	Add(&num);
//	printf("num=%d\n", num);
//	system("pause");
//	return 0;
//}


//链式访问
//int main()
//{
//	int len = 0;
//	//1
//	len = strlen("abc");
//	printf("%d\n", len);
//	//2
//	printf("%d\n", strlen("abc"));
//	system("pause");
//	return 0;
//}



//int main()
//{
//	printf("%d", printf("%d", printf("%d", 43)));//4321
//	//返回值为被打印的位数--43—2位——2--1位
//	system("pause");
//	return 0;
//}


总结：
1、当自定义函数传送一个数组时——int ret=binary_search(arr,k,sz);这里的arr传递过去的是数组arr首元素地址
2、*p++;  ++的优先级高于* 在执行时会先执行++再执行*
